#if(!$util.isEmpty(${dao.packageName}))
package ${dao.packageName};

#end
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.PreparedStatementSetter;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.RowMapper;

import org.mybatis.spring.support.SqlSessionDaoSupport;
import org.anyframe.pagination.Page;
import org.anyframe.plugin.mybatis.domain.Movie;
import org.apache.ibatis.session.RowBounds;
import org.mybatis.spring.support.SqlSessionDaoSupport;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Repository;

#if(!$util.isEmpty(${dao.voName}))
import ${dao.voName};
#end


/**
#foreach($eachline in ${dao.descriptionLines})
 * ${eachline}
#end
 * @daoType
 * @localName $!{dao.localName}
 * @author $!{dao.userId}
 */
  
@Repository("$util.uncapitalize(${dao.name})")
public class ${dao.name} extends SqlSessionDaoSupport {

##If you doesn't want to use DAO class being singleton, comment these lines. - start
	private static final ${dao.name} instance = new ${dao.name}();
	
	private ${dao.name}() {
	}
	
	@Value("#{contextProperties['pageSize'] ?: 10}")
	int pageSize;

	@Value("#{contextProperties['pageUnit'] ?: 10}")
	int pageUnit;
	
	
	
	/**
	 * Dao 인스턴스 객체를 리턴한다.
	 * @return
	 */
	public static ${dao.name} getInstance() {
		return instance;
	}
##If you doesn't want to use DAO class being singleton, comment these lines. - end

#foreach($method in $dao.methodInfoList)
#parse("dao_methods_mybatis.vm")
#end
}